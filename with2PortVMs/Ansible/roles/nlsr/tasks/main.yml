---
# tasks file for nlsr
- name: create nlsr user
  user: name=nlsr state=present shell=/bin/bash createhome=yes home=/home/nlsr
  become: yes

- name: create nlsr directories
  file: path=/usr/local/etc/ndn/nlsr/keys state=directory owner=nlsr group=nlsr mode=0755
  become: yes
- file: path=/usr/local/var/lib/ndn/nlsr state=directory owner=nlsr group=nlsr mode=0755
  become: yes
- file: path=/usr/local/var/lib/ndn/nlsr/.ndn state=directory owner=nlsr group=nlsr mode=0755
  become: yes
- file: path=/usr/local/var/log/ndn/nlsr state=directory owner=nlsr group=nlsr mode=0755
  become: yes

- name: create nlsr.conf
  #template: src=nlsr.conf.j2 dest=/usr/local/etc/ndn/nlsr/ansible_nlsr.conf owner=nlsr group=nlsr mode="u=rw,g=r,o=r"
  template: src=nlsr.conf.j2 dest=/usr/local/etc/ndn/nlsr/nlsr.conf owner=nlsr group=nlsr mode="u=rw,g=r,o=r"
  notify: restart nlsr
  become: yes

#- debug:
#    msg: "default_prefix: {{ default_prefix }}"

- name: copy nlsr /etc/init conf file
  copy: dest=/etc/init/nlsr.conf  src=roles/nlsr/files/etc_init_nlsr.conf owner=root group=root mode=0644
  become: yes
  notify: restart nlsr

#- name: copy nlsr .ndn/client.conf
#  copy: dest=/usr/local/var/lib/ndn/nlsr/.ndn/client.conf  src=roles/nlsr/files/client.conf owner=nlsr group=nlsr mode=0644
#  become: yes

# copy NLSR root cert
- copy: src=roles/nlsr/files/root.cert dest=/usr/local/etc/ndn/nlsr/keys/root.cert group=nlsr owner=nlsr
  become: yes

# generate site and nlsr keys for user nlsr if needed
- script: roles/nlsr/files/key_gen1.sh "{{ default_prefix }}" "{{ inventory_hostname }}"
  become: yes
  #register: keygen1
  ignore_errors: yes

# fetch unsigned keys back to here
- fetch: 
    src: /home/nlsr/unsigned_site.cert
    dest: roles/nlsr/files/ANSIBLE_{{ inventory_hostname }}_unsigned_site.cert
    flat: yes

- fetch: 
    src: /home/nlsr/approval.info
    dest: roles/nlsr/files/ANSIBLE_{{ inventory_hostname }}_approval.info
    flat: yes

# copy unsigned keys to UCLA for approval
- copy: src={{ item }} dest=/home/nlsr/ owner=nlsr group=nlsr mode=644
  with_fileglob:
    - roles/nlsr/files/*_unsigned_site.cert
  when: inventory_hostname == "UCLA"
  become: yes

# copy approval info (NAME and PREFIX) to UCLA for use in approval process
- copy: src={{ item }} dest=/home/nlsr/ owner=nlsr group=nlsr mode=644
  with_fileglob:
    - roles/nlsr/files/*_approval.info
  when: inventory_hostname == "UCLA"
  become: yes

# approve any unsigned keys
- script: roles/nlsr/files/key_approval.sh 
  #register: root_approved
  when: inventory_hostname == "UCLA"
  ignore_errors: yes
  become: yes

# get the names of approved site certs
- name: get filenames of approved site certs
  shell: cd /home/nlsr/ ; ls -1 ANSIBLE_*_site.cert | grep -v unsigned
  register: approved_sites
  when: inventory_hostname == "UCLA"
  become: yes

- debug:
    msg: "approved_sites.stdout_lines: {{ approved_sites.stdout_lines }}"
  when: inventory_hostname == "UCLA"

# fetch approved site certs
- fetch: src=/home/nlsr/{{ item }} dest=roles/nlsr/files/  flat=yes
  when: inventory_hostname == "UCLA"
  with_items: "{{ (inventory_hostname == 'UCLA') | ternary(approved_sites.stdout_lines, '') }}"

- name: check if <NAME>_site.cert exists
  local_action: stat path=roles/nlsr/files/ANSIBLE_{{inventory_hostname}}_site.cert
  #become_user: jdd
  become: false
  register: stat_result

# copy approved site certs to sites
- copy: src=roles/nlsr/files/ANSIBLE_{{inventory_hostname}}_site.cert dest=/usr/local/etc/ndn/nlsr/keys/site.cert group=nlsr owner=nlsr
  when: stat_result|success
  ignore_errors: yes
  become: yes

# clean up the approval info files, getting rid of any for which we have approved site certs
- local_action: command roles/nlsr/files/clean_approval_info.sh \"{{ role_path }}\"
  #become_user: jdd
  become: false

- debug:
    msg: "about to do key_gen2.sh {{default_prefix}} ndnops {{inventory_hostname}} {{router_name}}"

# finish generating keys and certs for user nlsr
- script: roles/nlsr/files/key_gen2.sh "{{default_prefix}}" "ndnops"  "{{inventory_hostname}}" "{{router_name}}"
  #register: keygen2
  ignore_errors: yes
  become: yes


- name: create log4cxx.conf
  copy: dest=/usr/local/etc/ndn/nlsr/log4cxx.conf src=roles/nlsr/files/log4cxx.conf owner=root group=root mode=0644
  notify: restart nlsr
  become: yes

#- name: install nlsr
#  apt: name=nlsr state=latest update_cache=yes

- name: start nlsr
  service: name=nlsr state=started enabled=yes
  become: yes

#- name: start nlsr
#  command: "nohup /usr/local/bin/nlsr -f /usr/local/etc/ndn/nlsr/nlsr.conf &"
#  become: yes
#  #become_user: nlsr
#  ignore_errors: yes




